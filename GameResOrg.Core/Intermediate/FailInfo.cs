using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using JetBrains.Annotations;

namespace GameResOrg.Intermediate
{
	public sealed class FailInfo : FailInfo<string>
	{
		public static readonly Task<FailInfo> NullResultTask = Task.FromResult<FailInfo>(null);

		public FailInfo(string failCode, string message = null)
			: base(failCode, message) { }
	}

	/// <summary>
	/// Describes a fail that may be generated by api method. 
	/// </summary>
	/// <typeparam name="T"></typeparam>
	public class FailInfo<T>
	{
		protected string _message;
		protected T _failCode;
		public object Data { get; internal set; } 

		public FailInfo(T failCode, string message = null)
		{
			_failCode = failCode;
			_message  = message;
		}

		[NotNull]
		public string Message
		{
			get
			{
				if (_message != null)
					return _message;
				Load(_failCode.ToString());
				return _message;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		protected void Load(string code)
		{
			_message = code;
		}

		[CanBeNull]
		public static explicit operator string([CanBeNull] FailInfo<T> info)
		{
			return info?.Message;
		}
	}
}
